
import java.awt.List;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.CallableStatement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.UUID;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author roscr
 * 
 * 
 * 
 * 
 */
public class ModificacionUsuarios extends javax.swing.JFrame {
    private InfoCurrentUser infoUsuarioActual;//usuario actual
    private ArrayList<String> arrayRoles = new ArrayList<>();
    public ModificacionUsuarios(InfoCurrentUser infoUsuarioActual) {
        this.infoUsuarioActual = infoUsuarioActual; //usuario actual
        initComponents();
        this.setLocationRelativeTo(null);
        
        Eliminar.setEnabled(false);
        agregarButton.setEnabled(true);
        btnModificar.setEnabled(false);
        cancelButton.setEnabled(false);
        LabelTitle.setVisible(false);
        labelError.setVisible(false);
        
        
        idPersonaText.setEditable(false);
        mostrarRoles();
        mostrarUsuarios();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaUsuarios = new javax.swing.JTable();
        agregarButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnModificar = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        idPersonaText = new javax.swing.JTextField();
        emailText = new javax.swing.JTextField();
        passwordText = new javax.swing.JPasswordField();
        Eliminar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        nombreText = new javax.swing.JTextField();
        listRol = new javax.swing.JComboBox<>();
        LabelTitle = new javax.swing.JLabel();
        labelError = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaRoles = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MODIFICAR PRODUCTOS");
        setAlwaysOnTop(true);
        setLocationByPlatform(true);
        setName("frmModificarProducto"); // NOI18N
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);

        jPanel1.setBackground(new java.awt.Color(197, 217, 192));

        tablaUsuarios.setBackground(new java.awt.Color(128, 167, 191));
        tablaUsuarios.setForeground(new java.awt.Color(0, 0, 51));
        tablaUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID Usuario", "Nombre", "ID Persona", "Email", "Rol", "ID Rol"
            }
        ));
        tablaUsuarios.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        tablaUsuarios.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tablaUsuarios.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        tablaUsuarios.setFocusable(false);
        tablaUsuarios.setOpaque(false);
        tablaUsuarios.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tablaUsuarios = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex,int colIndex){
                return false;
            }
        };
        tablaUsuarios.getTableHeader().setResizingAllowed(false);
        tablaUsuarios.getTableHeader().setReorderingAllowed(false);
        tablaUsuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaUsuariosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaUsuarios);
        if (tablaUsuarios.getColumnModel().getColumnCount() > 0) {
            tablaUsuarios.getColumnModel().getColumn(0).setPreferredWidth(400);
            tablaUsuarios.getColumnModel().getColumn(2).setPreferredWidth(2);
        }

        agregarButton.setBackground(new java.awt.Color(0, 204, 51));
        agregarButton.setForeground(new java.awt.Color(0, 0, 0));
        agregarButton.setText("Agregar Usuario");
        agregarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarButtonActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(242, 242, 242));

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Nuevo rol");

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Nueva Contrase√±a");

        jLabel10.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Nuevo email");

        btnModificar.setBackground(new java.awt.Color(0, 0, 204));
        btnModificar.setForeground(new java.awt.Color(255, 255, 255));
        btnModificar.setText("Actualizar");
        btnModificar.setName("btnModificar"); // NOI18N
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        cancelButton.setBackground(new java.awt.Color(255, 102, 51));
        cancelButton.setForeground(new java.awt.Color(255, 255, 255));
        cancelButton.setText("Cancelar");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Editar Usuario");

        idPersonaText.setBackground(new java.awt.Color(179, 185, 192));
        idPersonaText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idPersonaTextActionPerformed(evt);
            }
        });

        emailText.setBackground(new java.awt.Color(179, 185, 192));

        passwordText.setBackground(new java.awt.Color(179, 185, 192));

        Eliminar.setBackground(new java.awt.Color(255, 0, 51));
        Eliminar.setForeground(new java.awt.Color(255, 255, 255));
        Eliminar.setText("Eliminar");
        Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Nuevo nombre");

        backButton.setBackground(new java.awt.Color(255, 204, 0));
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setText("Atras");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("ID Persona");

        nombreText.setBackground(new java.awt.Color(179, 185, 192));
        nombreText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreTextActionPerformed(evt);
            }
        });

        listRol.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        listRol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listRolActionPerformed(evt);
            }
        });

        LabelTitle.setForeground(new java.awt.Color(0, 0, 204));
        LabelTitle.setText("Modifique los campos que desea cambiar");

        labelError.setForeground(new java.awt.Color(255, 0, 0));
        labelError.setText("jLabel4");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelError)
                    .addComponent(LabelTitle)
                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordText, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(emailText, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                            .addComponent(listRol, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(60, 60, 60)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idPersonaText, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nombreText, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Eliminar)
                        .addGap(33, 33, 33)
                        .addComponent(btnModificar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(3, 3, 3)
                .addComponent(LabelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(idPersonaText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nombreText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(passwordText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(emailText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(listRol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(labelError)
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(btnModificar)
                    .addComponent(Eliminar))
                .addGap(188, 188, 188))
        );

        tablaRoles.setBackground(new java.awt.Color(128, 167, 191));
        tablaRoles.setForeground(new java.awt.Color(0, 0, 51));
        tablaRoles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID Rol", "Nombre Rol"
            }
        ));
        tablaRoles.getTableHeader().setResizingAllowed(false);
        tablaRoles.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tablaRoles);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(agregarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 794, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 36, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(195, 195, 195))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(agregarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void idPersonaTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idPersonaTextActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_idPersonaTextActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed

        /*idPersonaText.setText(idPersona);
            passwordText.setText("");
            emailText.setText(emailUsuario);
            idPersonaDelete.setText(idPersona);
            nombreText.setText(nombreUsuario);
            
            LabelTitle.setVisible(true);*/
        
        String nombre = nombreText.getText().trim();
        String email = emailText.getText().trim();
        String pass = new String(passwordText.getPassword()).trim();
        String rol = (String) listRol.getSelectedItem();
        
        labelError.setVisible(true);
        
        if (nombre.isEmpty() || email.isEmpty() || rol.equalsIgnoreCase("selecciona tu rol")) {
            JOptionPane.showMessageDialog(this, "Campos vacios", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(!nombre.matches("^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\\s]+$")){
            labelError.setText("No se permite numero o simbolos especiales");
            return ;
        }
        
        if(!pass.isEmpty()){
            if(pass.length()< 8 ){
                labelError.setText("La contrase√±a de tener 8 o mas caracteres");
                return ;
            }
        }
 
        if(!email.matches("^[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$")){
            labelError.setText("El email no es v√°lido");
            return;
        }
        // logica pora validar cada uno de  los inputs
        modificarUsuario();
    }//GEN-LAST:event_btnModificarActionPerformed

    private void EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarActionPerformed
        // TODO add your handling code here:
        eliminarUsuario();
    }//GEN-LAST:event_EliminarActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        Menu newframe = new Menu(infoUsuarioActual);
        newframe.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        Eliminar.setEnabled(false);
        agregarButton.setEnabled(true);
        btnModificar.setEnabled(false);
        cancelButton.setEnabled(false);
        LabelTitle.setVisible(false);
        labelError.setVisible(false);
        
        
        idPersonaText.setText("");
        passwordText.setText("");
        emailText.setText("");
        nombreText.setText("");
        
        listRol.setSelectedIndex(0);
        
        
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void agregarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
        AgregarUsuario frameActual = new AgregarUsuario(this.infoUsuarioActual);
        frameActual.setVisible(true);
    }//GEN-LAST:event_agregarButtonActionPerformed

    private void nombreTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreTextActionPerformed
        // TODO add your handling code here:   
    }//GEN-LAST:event_nombreTextActionPerformed

    private void listRolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listRolActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listRolActionPerformed

    private void tablaUsuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaUsuariosMouseClicked
        // TODO add your handling code here:
        int filaSeleccionada = tablaUsuarios.getSelectedRow();
        if(filaSeleccionada != -1){
            String idPersona =(String) tablaUsuarios.getValueAt(filaSeleccionada,2);
            String nombreUsuario = (String) tablaUsuarios.getValueAt(filaSeleccionada, 1);
            String emailUsuario = (String) tablaUsuarios.getValueAt(filaSeleccionada,3);
            String rol = (String) tablaUsuarios.getValueAt(filaSeleccionada,4);
            
            idPersonaText.setText(idPersona);
            passwordText.setText("");
            emailText.setText(emailUsuario);
            nombreText.setText(nombreUsuario);
            
            LabelTitle.setVisible(true);
            
            Eliminar.setEnabled(true);
            agregarButton.setEnabled(true);
            btnModificar.setEnabled(true);
            cancelButton.setEnabled(true);  
            listRol.setSelectedItem(rol);
            
        }
        
    }//GEN-LAST:event_tablaUsuariosMouseClicked
    
    private void eliminarUsuario() {
        String idPersona = idPersonaText.getText();
        labelError.setText(idPersona);
        if (idPersona.equals("")) {
            JOptionPane.showMessageDialog(this, "ID incorrecto", "Error", JOptionPane.ERROR_MESSAGE);
            return; 
        }

        int intIdPersona = 0;
        
        try {
            intIdPersona = Integer.parseInt(idPersona);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error en el formato", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //System.out.println("user actual: "+infoUsuarioActual.getCorreo()+","+infoUsuarioActual.getIdPersona());
        
        if (intIdPersona == infoUsuarioActual.getIdPersona()) {
            JOptionPane.showMessageDialog(this, "No puedes eliminar tu propia cuenta.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // mostrar mensaje para confirmar la eliminacion del usuario
        int confirm = JOptionPane.showConfirmDialog(this, "¬øEliminar este usuario?", "Confirmar", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (confirm == JOptionPane.YES_OPTION) {
            //consulta para contar registros donde exista id
            String checkSql = "SELECT COUNT(*) FROM usuario WHERE id_persona = ?";

            try (Connection conexion = new ConexionBD().getConnection(); 
            
            //ejecutar consulta con prepared statement para verificar si hay coincidencias con id
            PreparedStatement checkStatement = conexion.prepareStatement(checkSql)) {
                
                //Guardar en el result set los resultados de la consulta usando el id ingresado
                checkStatement.setInt(1, intIdPersona);
                ResultSet rs = checkStatement.executeQuery();
                
                //verificar si el conteo en la consulta es mayor a cero, si es mayor existe el id y se elimina
                if (rs.next() && rs.getInt(1) > 0) {
                    
                    String sql = "CALL eliminar_usuario(?)";

                    try (CallableStatement callableStatement = conexion.prepareCall(sql)) {
                        callableStatement.setInt(1, intIdPersona);
                        callableStatement.execute();
                        JOptionPane.showMessageDialog(this, "Usuario eliminado", "√âxito", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else {
                    //la consulto no conto ninguna coincidencia
                    JOptionPane.showMessageDialog(this, "El ID no existe en la base de datos.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al eliminar", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

         mostrarUsuarios();
        idPersonaText.setText("");
        passwordText.setText("");
        emailText.setText("");
        nombreText.setText("");
    }


    private void modificarUsuario() {
        //obtener los campos de entradas
        String nombre = nombreText.getText();
        String idPersonaStr = idPersonaText.getText().trim();
        String email = emailText.getText().trim();
        String rol = (String) listRol.getSelectedItem(); // modificalo
        String contrasenia = new String(passwordText.getPassword()).trim();
        int idRol = arrayRoles.indexOf(rol)+1;
        
        String sql = "CALL actualizar_usuario(?, ?, ?, ?, ?)";//procedimiento
        
        //convertir estos campos a enteros
        int idPersona = Integer.parseInt(idPersonaStr);

        try (Connection conexion = new ConexionBD().getConnection(); 
            
            //variable para hacer consulta ejecutable
            CallableStatement callableStatement = conexion.prepareCall(sql)) {

            callableStatement.setInt(1,idPersona); 
            callableStatement.setString(2, nombre);
            callableStatement.setString(3, contrasenia);
            callableStatement.setString(4, email);
            callableStatement.setInt(5, idRol);
            callableStatement.execute();

            JOptionPane.showMessageDialog(this, "Usuario actualizado", "Exito", JOptionPane.INFORMATION_MESSAGE);
            idPersonaText.setText("");
            passwordText.setText("");
            emailText.setText("");
            nombreText.setText("");
            labelError.setText("");
            
            Eliminar.setEnabled(false);
            agregarButton.setEnabled(true);
            btnModificar.setEnabled(false);
            cancelButton.setEnabled(false);
            LabelTitle.setVisible(false);
            labelError.setVisible(false);
            
            mostrarUsuarios();

        } catch (SQLException e) {
            System.out.println("Error al modificar: "+e);
            JOptionPane.showMessageDialog(this, "Error al modificar el usuario", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, "Error en el formato", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModificarInsectos().setVisible(true);
            }
        });
    }
    
    public void mostrarUsuarios(){
        //System.out.println("Entrando mostrarProductos");
        String sql = "SELECT * FROM consultar_todos_usuarios_return()"; //consuta para obtener el procedimiento 
        CallableStatement callableStatement; // variable para almacenar el resultado del procedimiento
        
        //conexion
        ConexionBD conectar = new ConexionBD();
        Connection conexion = conectar.getConnection();
        DefaultTableModel model = new DefaultTableModel(); // hacer la tabla un modelo para poder modificar las filas y columnas

        model.addColumn("ID Usuario");
        model.addColumn("Nombre");
        model.addColumn("ID Persona");
        model.addColumn("Email");
        model.addColumn("Rol");
        model.addColumn("ID Rol");

        tablaUsuarios.setModel(model);
        tablaUsuarios.getColumnModel().getColumn(0).setPreferredWidth(220);
        tablaUsuarios.getColumnModel().getColumn(0).setResizable(false);
        tablaUsuarios.getColumnModel().getColumn(2).setPreferredWidth(45);
        tablaUsuarios.getColumnModel().getColumn(2).setResizable(false);
        tablaUsuarios.getColumnModel().getColumn(5).setPreferredWidth(2);
        tablaUsuarios.getColumnModel().getColumn(5).setResizable(false);

        try {
            //usar prepared statement y guardar los resultados
            PreparedStatement preparedStatement = conexion.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery(); 

            while (resultSet.next()) { 
                String[] infoTablas = new String[6]; 
                infoTablas[0] = resultSet.getString(1);
                infoTablas[1] = resultSet.getString(2); 
                infoTablas[2] = resultSet.getString(3); 
                infoTablas[3] = resultSet.getString(4); 
                infoTablas[4] = resultSet.getString(5); 
                infoTablas[5] = resultSet.getString(6); 

                model.addRow(infoTablas);
            }

            resultSet.close(); 
        } catch (SQLException e) {
            System.out.println("Error: " + e.getMessage());
        }

        
    }
    
    public void mostrarRoles(){
        //consulta
        String sql = "{CALL obtener_roles()}";
        
        //conexion
        ConexionBD conectar = new ConexionBD();
        Connection conexion = conectar.getConnection();
        
        //crear modelo crear las columnas y aignar modelo a la tabla
        DefaultTableModel modelRoles = new DefaultTableModel();
        modelRoles.addColumn("ID Rol");
        modelRoles.addColumn("Nombre Rol");

        tablaRoles.setModel(modelRoles);
        listRol.removeAllItems();
        listRol.addItem("selecciona tu rol");

        try {
            //ejecutar y guardar en result set
            CallableStatement callableStatement = conexion.prepareCall(sql);
            ResultSet resultSet = callableStatement.executeQuery();

            while (resultSet.next()) {
                String[] infoRoles = new String[2];
                infoRoles[0] = resultSet.getString("ID_Rol");
                infoRoles[1] = resultSet.getString("nombre_rol");
                modelRoles.addRow(infoRoles);
                listRol.addItem(infoRoles[1]);
                arrayRoles.add(infoRoles[1]);
            }

            resultSet.close();
        } catch (SQLException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Eliminar;
    private javax.swing.JLabel LabelTitle;
    private javax.swing.JButton agregarButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField emailText;
    private javax.swing.JTextField idPersonaText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelError;
    private javax.swing.JComboBox<String> listRol;
    private javax.swing.JTextField nombreText;
    private javax.swing.JPasswordField passwordText;
    private javax.swing.JTable tablaRoles;
    public javax.swing.JTable tablaUsuarios;
    // End of variables declaration//GEN-END:variables
}
